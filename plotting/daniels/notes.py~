tuner = ppf.DeviceTuner(devicesDirectory = hardware_map,
                        verbose = True,
                        saveData = True,
                        outputDirectory = data_directory,
                        is16Channel = True, initializeBoards = False)
ppf.initializePPTunerForUse(tuner)

resies = ppf.overbiasAndNull(tuner, squids = sSquids, amplitude = BP.default_overbias_amp, channels = 'used',
                                 carrier_gain = BP.default_carrier_gain, nuller_gain = BP.default_nuller_gain, 
                                 excludedChannels = BP.unbiasable_channels, specificArgs = BP.overbias_specargs, 
                                 verbose =True,fast=True, leave_dan_on=True,units='NORMALIZED_16ch')#useStoredValues=True



    fDic = getFrequencyMapPPChanForm(tuner)

def getFrequencyMapPPChanForm(tuner):
    freqMap = {}
    for squidId in tuner.squidIds:
        squid = tuner.deviceManager.findDevice(SQUID_TYPE, squidId)
        freqs = squid.getCombFrequencies()
        nchans = dfmux_conf['NumDMFSChans']
        if type(freqs)!=type({}):
            print 'PyPolInterface.getFrequencyMapPPChanForm could not find any bias frequencies in the hardware map for squid %s, using zeroes.' % squidId
            for c in range(1, 1+nchans):
                channel_name = 'Ch%i' % c
                freqMap['%s%s'%(squidId,channel_name)] = {'frequency':0}
        else:
            for c in range(1, 1+nchans):
                channel_name = 'Ch%i' % c
                if channel_name in freqs.keys(): freq = freqs[channel_name]
                else: freq = 0 # the channels that don't have associated frequencies get zeroes
                freqMap['%s%s'%(squidId,channel_name)] = {'frequency':int(float(freq))}
    #print freqMap
    return freqMap


ppCallTF(tuner, 'set_frequency',  squids=squids, channels=channels, specificArgs = fDic, excludedChannels = excludedChannels, 
             frequency = 0, units = 'Hz', target = 'carrier')




